<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:flex="http://www.springframework.org/schema/flex"
	   xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/flex 
		http://www.springframework.org/schema/flex/spring-flex-1.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">
           
	<flex:message-broker>
		<flex:config-processor ref="myConfigProcessor" />
		<flex:exception-translator ref="customExceptionTranslator"/>
		<flex:message-interceptor ref="myMessageInterceptor"/>
		<!--<flex:message-interceptor ref="loggingInterceptor"/>-->
		<!--<flex:remoting-service default-channels="my-amf"/>-->
		<!--<flex:message-service default-channels="my-longpolling-amf" />-->
		<!--<flex:secured />-->
	</flex:message-broker>
	
	<bean id="myConfigProcessor" class="com.srini.flex.MyDestinationCountingConfigProcessor" />
	<bean id="customExceptionTranslator" class="com.srini.flex.CustomExceptionTranslator"/>
	<bean id="myMessageInterceptor" class="com.srini.flex.MyMessageInterceptor"/>
	<bean id="loggingInterceptor" class="com.srini.flex.LoggingInterceptor"/>

	<bean id="myHelloBean" class="com.srini.flex.HelloBean" />
	
	<bean id="myHelloIntegratedBean" class="com.srini.flex.HelloIntegratedBean" >
		<flex:remoting-destination />
	</bean>
	
	<flex:message-destination id="chat" />
	<flex:message-destination id="simple-feed" />
	
	<!-- MessageTemplate makes it easy to publish messages -->
	<bean id="defaultMessageTemplate" class="org.springframework.flex.messaging.MessageTemplate" />

	<!-- Pojo used to start and stop the data feed that pushes data in the 'simple-feed' destination -->
	<bean id="simpleFeedStarter" class="flex.spring.samples.simplefeed.SimpleFeed">
		<constructor-arg ref="defaultMessageTemplate" />
		<flex:remoting-destination />
	</bean>

    <!-- Implementation of ProductDAO using low-level JDBC -->
    <bean id="productService" class="flex.spring.samples.product.ProductDAO" >
        <constructor-arg ref="dataSource"/>
    </bean>
    
	<!-- Expose the productDAO bean for BlazeDS remoting -->
	<flex:remoting-destination ref="productService" />
	
    <!-- Implementation of ContactDAO using Spring's JdbcTemplate -->
    <bean id="contactService" class="flex.spring.samples.contact.ContactDAO" >
        <constructor-arg ref="dataSource"/>
    </bean>
    
	<!-- Expose the contactDAO bean for BlazeDS remoting -->
	<flex:remoting-destination ref="contactService" />

    <!-- Implementation of CompanyDAO using Spring's JdbcTemplate -->
    <bean id="companyService" class="flex.spring.samples.company.CompanyDAO" >
        <constructor-arg ref="dataSource"/>
        <constructor-arg ref="industryService"/>
    </bean>
    
	<!-- Expose the companyDAO bean for BlazeDS remoting -->
	<flex:remoting-destination ref="companyService" />

    <!-- Implementation of IndustryDAO using Spring's JdbcTemplate -->
    <bean id="industryService" class="flex.spring.samples.industry.IndustryDAO" >
        <constructor-arg ref="dataSource"/>
    </bean>
    
	<!-- Expose the IndustryDAO bean for BlazeDS remoting -->
	<flex:remoting-destination ref="industryService" />

	<!-- Create and populate the tables if the springflexdemodb database -->
	<bean id="dbInit" class="flex.spring.samples.util.DatabaseInitializer">
        <constructor-arg ref="dataSource"/>
	</bean>
    
    <!-- Simple Spring-managed DataSource for embedded h2 database (http://www.h2database.com). H2 is used instead of HSQLDB in this Test Drive
    	 because it has better support for retrieving autogenerated keys using the JDBC 3 approach which is used by Spring's JdbcTemplate.
    	 The "jdbc:h2:~/sprinflexdemodb/sprinflexdemodb" URL points to a springflexdemodb database in the springdemodb directory 
    	 under the user's directory (represented by ~). H2 creates the database automatically if it doesn't exists, in which case, the dbInit bean
    	 takes care of creating and populating the sample tables.  
	-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver" />
        <property name="url" value="jdbc:h2:~/sprinflexdemodb/sprinflexdemodb" />
    </bean>
    
</beans>